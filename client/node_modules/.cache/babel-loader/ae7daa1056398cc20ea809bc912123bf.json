{"ast":null,"code":"export function pluralize(name,count){if(count===1){return name;}return name+\"s\";}export function idbPromise(storeName,method,object){return new Promise(function(resolve,reject){// open connection to the database `shop-shop` with the version of 1\nvar request=window.indexedDB.open(\"shop-shop\",1);// create variables to hold reference to the database, transaction (tx), and object store\nvar db,tx,store;// if version has changed (or if this is the first time using the database), run this method and create the three object stores\nrequest.onupgradeneeded=function(e){var db=request.result;// create object store for each type of data and set \"primary\" key index to be the `_id` of the data\ndb.createObjectStore(\"products\",{keyPath:\"_id\"});db.createObjectStore(\"categories\",{keyPath:\"_id\"});db.createObjectStore(\"cart\",{keyPath:\"_id\"});};// handle any errors with connecting\nrequest.onerror=function(e){console.log(\"There was an error\");};// on database open success\nrequest.onsuccess=function(e){// save a reference of the database to the `db` variable\ndb=request.result;// open a transaction do whatever we pass into `storeName` (must match one of the object store names)\ntx=db.transaction(storeName,\"readwrite\");// save a reference to that object store\nstore=tx.objectStore(storeName);// if there's any errors, let us know\ndb.onerror=function(e){console.log(\"error\",e);};switch(method){case'put':store.put(object);resolve(object);break;case'get':var all=store.getAll();all.onsuccess=function(){resolve(all.result);};break;case'delete':store.delete(object._id);break;default:console.log('No valid method');break;}// when the transaction is complete, close the connection\ntx.oncomplete=function(){db.close();};};});}","map":{"version":3,"sources":["/Users/evansrm5/Desktop/Bootcamp/shop-shop/client/src/utils/helpers.js"],"names":["pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","request","window","indexedDB","open","db","tx","store","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close"],"mappings":"AAAA,MAAO,SAASA,CAAAA,SAAT,CAAmBC,IAAnB,CAAyBC,KAAzB,CAAgC,CACtC,GAAIA,KAAK,GAAK,CAAd,CAAiB,CAChB,MAAOD,CAAAA,IAAP,CACA,CACD,MAAOA,CAAAA,IAAI,CAAG,GAAd,CACA,CAED,MAAO,SAASE,CAAAA,UAAT,CAAoBC,SAApB,CAA+BC,MAA/B,CAAuCC,MAAvC,CAA+C,CACrD,MAAO,IAAIC,CAAAA,OAAJ,CAAY,SAACC,OAAD,CAAUC,MAAV,CAAqB,CACvC;AACA,GAAMC,CAAAA,OAAO,CAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,CAAsB,WAAtB,CAAmC,CAAnC,CAAhB,CAEA;AACA,GAAIC,CAAAA,EAAJ,CAAQC,EAAR,CAAYC,KAAZ,CAEA;AACAN,OAAO,CAACO,eAAR,CAA0B,SAAUC,CAAV,CAAa,CACtC,GAAMJ,CAAAA,EAAE,CAAGJ,OAAO,CAACS,MAAnB,CACA;AACAL,EAAE,CAACM,iBAAH,CAAqB,UAArB,CAAiC,CAAEC,OAAO,CAAE,KAAX,CAAjC,EACAP,EAAE,CAACM,iBAAH,CAAqB,YAArB,CAAmC,CAAEC,OAAO,CAAE,KAAX,CAAnC,EACAP,EAAE,CAACM,iBAAH,CAAqB,MAArB,CAA6B,CAAEC,OAAO,CAAE,KAAX,CAA7B,EACA,CAND,CAQA;AACAX,OAAO,CAACY,OAAR,CAAkB,SAAUJ,CAAV,CAAa,CAC9BK,OAAO,CAACC,GAAR,CAAY,oBAAZ,EACA,CAFD,CAGA;AACAd,OAAO,CAACe,SAAR,CAAoB,SAAUP,CAAV,CAAa,CAChC;AACAJ,EAAE,CAAGJ,OAAO,CAACS,MAAb,CACA;AACAJ,EAAE,CAAGD,EAAE,CAACY,WAAH,CAAetB,SAAf,CAA0B,WAA1B,CAAL,CACA;AACAY,KAAK,CAAGD,EAAE,CAACY,WAAH,CAAevB,SAAf,CAAR,CAEA;AACAU,EAAE,CAACQ,OAAH,CAAa,SAAUJ,CAAV,CAAa,CACzBK,OAAO,CAACC,GAAR,CAAY,OAAZ,CAAqBN,CAArB,EACA,CAFD,CAIG,OAAQb,MAAR,EACE,IAAK,KAAL,CACEW,KAAK,CAACY,GAAN,CAAUtB,MAAV,EACAE,OAAO,CAACF,MAAD,CAAP,CACA,MACF,IAAK,KAAL,CACE,GAAMuB,CAAAA,GAAG,CAAGb,KAAK,CAACc,MAAN,EAAZ,CACAD,GAAG,CAACJ,SAAJ,CAAgB,UAAW,CACzBjB,OAAO,CAACqB,GAAG,CAACV,MAAL,CAAP,CACD,CAFD,CAGA,MACF,IAAK,QAAL,CACEH,KAAK,CAACe,MAAN,CAAazB,MAAM,CAAC0B,GAApB,EACA,MACF,QACET,OAAO,CAACC,GAAR,CAAY,iBAAZ,EACA,MAhBJ,CAmBH;AACAT,EAAE,CAACkB,UAAH,CAAgB,UAAY,CAC3BnB,EAAE,CAACoB,KAAH,GACA,CAFD,CAGA,CApCD,CAqCA,CA1DM,CAAP,CA2DA","sourcesContent":["export function pluralize(name, count) {\n\tif (count === 1) {\n\t\treturn name;\n\t}\n\treturn name + \"s\";\n}\n\nexport function idbPromise(storeName, method, object) {\n\treturn new Promise((resolve, reject) => {\n\t\t// open connection to the database `shop-shop` with the version of 1\n\t\tconst request = window.indexedDB.open(\"shop-shop\", 1);\n\n\t\t// create variables to hold reference to the database, transaction (tx), and object store\n\t\tlet db, tx, store;\n\n\t\t// if version has changed (or if this is the first time using the database), run this method and create the three object stores\n\t\trequest.onupgradeneeded = function (e) {\n\t\t\tconst db = request.result;\n\t\t\t// create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n\t\t\tdb.createObjectStore(\"products\", { keyPath: \"_id\" });\n\t\t\tdb.createObjectStore(\"categories\", { keyPath: \"_id\" });\n\t\t\tdb.createObjectStore(\"cart\", { keyPath: \"_id\" });\n\t\t};\n\n\t\t// handle any errors with connecting\n\t\trequest.onerror = function (e) {\n\t\t\tconsole.log(\"There was an error\");\n\t\t};\n\t\t// on database open success\n\t\trequest.onsuccess = function (e) {\n\t\t\t// save a reference of the database to the `db` variable\n\t\t\tdb = request.result;\n\t\t\t// open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n\t\t\ttx = db.transaction(storeName, \"readwrite\");\n\t\t\t// save a reference to that object store\n\t\t\tstore = tx.objectStore(storeName);\n\n\t\t\t// if there's any errors, let us know\n\t\t\tdb.onerror = function (e) {\n\t\t\t\tconsole.log(\"error\", e);\n\t\t\t};\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }      \n\n\t\t\t// when the transaction is complete, close the connection\n\t\t\ttx.oncomplete = function () {\n\t\t\t\tdb.close();\n\t\t\t};\n\t\t};\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}