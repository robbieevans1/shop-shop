{"ast":null,"code":"var _jsxFileName = \"/Users/evansrm5/Desktop/Bootcamp/shop-shop/client/src/components/CategoryMenu/index.js\";\nimport React, { useEffect } from \"react\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from \"../../utils/actions\";\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\n\nfunction CategoryMenu(_ref) {\n  let {\n    setCategory\n  } = _ref;\n  const [state, dispatch] = useStoreContext();\n  const {\n    categories\n  } = state;\n  const {\n    data: categoryData\n  } = useQuery(QUERY_CATEGORIES);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  useEffect(() => {\n    // if categoryData exists or has changed from the response of useQuery, then run dispatch()\n    if (categoryData) {\n      // execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n    }\n  }, [categoryData, dispatch]);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }\n  }, \"Choose a Category:\"), categories.map(item => /*#__PURE__*/React.createElement(\"button\", {\n    key: item._id,\n    onClick: () => {\n      handleClick(item._id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }\n  }, item.name)));\n}\n\nexport default CategoryMenu;","map":{"version":3,"sources":["/Users/evansrm5/Desktop/Bootcamp/shop-shop/client/src/components/CategoryMenu/index.js"],"names":["React","useEffect","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","useQuery","QUERY_CATEGORIES","useStoreContext","CategoryMenu","setCategory","state","dispatch","categories","data","categoryData","handleClick","id","type","currentCategory","map","item","_id","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SACCC,iBADD,EAECC,uBAFD,QAGO,qBAHP;AAIA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,eAAT,QAAgC,yBAAhC;;AAEA,SAASC,YAAT,OAAuC;AAAA,MAAjB;AAAEC,IAAAA;AAAF,GAAiB;AACtC,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBJ,eAAe,EAAzC;AAEA,QAAM;AAAEK,IAAAA;AAAF,MAAiBF,KAAvB;AAEA,QAAM;AAAEG,IAAAA,IAAI,EAAEC;AAAR,MAAyBT,QAAQ,CAACC,gBAAD,CAAvC;;AAEA,QAAMS,WAAW,GAAIC,EAAD,IAAQ;AAC3BL,IAAAA,QAAQ,CAAC;AACRM,MAAAA,IAAI,EAAEb,uBADE;AAERc,MAAAA,eAAe,EAAEF;AAFT,KAAD,CAAR;AAIA,GALD;;AAOAd,EAAAA,SAAS,CAAC,MAAM;AACf;AACA,QAAIY,YAAJ,EAAkB;AACjB;AACAH,MAAAA,QAAQ,CAAC;AACRM,QAAAA,IAAI,EAAEd,iBADE;AAERS,QAAAA,UAAU,EAAEE,YAAY,CAACF;AAFjB,OAAD,CAAR;AAIA;AACD,GATQ,EASN,CAACE,YAAD,EAAeH,QAAf,CATM,CAAT;AAWC,sBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADF,EAEGC,UAAU,CAACO,GAAX,CAAeC,IAAI,iBAClB;AACE,IAAA,GAAG,EAAEA,IAAI,CAACC,GADZ;AAEE,IAAA,OAAO,EAAE,MAAM;AACbN,MAAAA,WAAW,CAACK,IAAI,CAACC,GAAN,CAAX;AACD,KAJH;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMGD,IAAI,CAACE,IANR,CADD,CAFH,CADF;AAeD;;AAED,eAAed,YAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport {\n\tUPDATE_CATEGORIES,\n\tUPDATE_CURRENT_CATEGORY,\n} from \"../../utils/actions\";\nimport { useQuery } from \"@apollo/client\";\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\n\nfunction CategoryMenu({ setCategory }) {\n\tconst [state, dispatch] = useStoreContext();\n\n\tconst { categories } = state;\n\n\tconst { data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n\tconst handleClick = (id) => {\n\t\tdispatch({\n\t\t\ttype: UPDATE_CURRENT_CATEGORY,\n\t\t\tcurrentCategory: id,\n\t\t});\n\t};\n\n\tuseEffect(() => {\n\t\t// if categoryData exists or has changed from the response of useQuery, then run dispatch()\n\t\tif (categoryData) {\n\t\t\t// execute our dispatch function with our action object indicating the type of action and the data to set our state for categories to\n\t\t\tdispatch({\n\t\t\t\ttype: UPDATE_CATEGORIES,\n\t\t\t\tcategories: categoryData.categories,\n\t\t\t});\n\t\t}\n\t}, [categoryData, dispatch]);\n\n  return (\n    <div>\n      <h2>Choose a Category:</h2>\n      {categories.map(item => (\n        <button\n          key={item._id}\n          onClick={() => {\n            handleClick(item._id);\n          }}\n        >\n          {item.name}\n        </button>\n      ))}\n    </div>\n  );\n}\n\nexport default CategoryMenu;\n"]},"metadata":{},"sourceType":"module"}