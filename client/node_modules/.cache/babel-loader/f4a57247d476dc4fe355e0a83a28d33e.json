{"ast":null,"code":"var _jsxFileName = \"/Users/evansrm5/Desktop/Bootcamp/shop-shop/client/src/components/CategoryMenu/index.js\";\nimport React, { useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport { UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY } from \"../../utils/actions\";\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction CategoryMenu() {\n  const [state, dispatch] = useStoreContext();\n  const {\n    categories\n  } = state;\n  const {\n    loading,\n    data: categoryData\n  } = useQuery(QUERY_CATEGORIES);\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n\n  const handleClick = id => {\n    dispatch({\n      type: UPDATE_CURRENT_CATEGORY,\n      currentCategory: id\n    });\n  };\n\n  return /*#__PURE__*/React.createElement(\"div\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 3\n    }\n  }, /*#__PURE__*/React.createElement(\"h2\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 4\n    }\n  }, \"Choose a Category:\"), categories.map(item => /*#__PURE__*/React.createElement(\"button\", {\n    key: item._id,\n    onClick: () => {\n      handleClick(item._id);\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, item.name)));\n}\n\nexport default CategoryMenu;","map":{"version":3,"sources":["/Users/evansrm5/Desktop/Bootcamp/shop-shop/client/src/components/CategoryMenu/index.js"],"names":["React","useEffect","useQuery","useStoreContext","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","QUERY_CATEGORIES","idbPromise","CategoryMenu","state","dispatch","categories","loading","data","categoryData","type","forEach","category","then","handleClick","id","currentCategory","map","item","_id","name"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,eAAT,QAAgC,yBAAhC;AACA,SACCC,iBADD,EAECC,uBAFD,QAGO,qBAHP;AAIA,SAASC,gBAAT,QAAiC,qBAAjC;AACA,SAASC,UAAT,QAA2B,qBAA3B;;AAEA,SAASC,YAAT,GAAwB;AACvB,QAAM,CAACC,KAAD,EAAQC,QAAR,IAAoBP,eAAe,EAAzC;AAEA,QAAM;AAAEQ,IAAAA;AAAF,MAAiBF,KAAvB;AAEA,QAAM;AAAEG,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAEC;AAAjB,MAAkCZ,QAAQ,CAACI,gBAAD,CAAhD;AAECL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIa,YAAJ,EAAkB;AAChBJ,MAAAA,QAAQ,CAAC;AACPK,QAAAA,IAAI,EAAEX,iBADC;AAEPO,QAAAA,UAAU,EAAEG,YAAY,CAACH;AAFlB,OAAD,CAAR;AAIAG,MAAAA,YAAY,CAACH,UAAb,CAAwBK,OAAxB,CAAgCC,QAAQ,IAAI;AAC1CV,QAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,EAAsBU,QAAtB,CAAV;AACD,OAFD;AAGD,KARD,MAQO,IAAI,CAACL,OAAL,EAAc;AACnBL,MAAAA,UAAU,CAAC,YAAD,EAAe,KAAf,CAAV,CAAgCW,IAAhC,CAAqCP,UAAU,IAAI;AACjDD,QAAAA,QAAQ,CAAC;AACPK,UAAAA,IAAI,EAAEX,iBADC;AAEPO,UAAAA,UAAU,EAAEA;AAFL,SAAD,CAAR;AAID,OALD;AAMD;AACF,GAjBQ,EAiBN,CAACG,YAAD,EAAeF,OAAf,EAAwBF,QAAxB,CAjBM,CAAT;;AAoBD,QAAMS,WAAW,GAAIC,EAAD,IAAQ;AAC3BV,IAAAA,QAAQ,CAAC;AACRK,MAAAA,IAAI,EAAEV,uBADE;AAERgB,MAAAA,eAAe,EAAED;AAFT,KAAD,CAAR;AAIA,GALD;;AAOA,sBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,0BADD,EAEET,UAAU,CAACW,GAAX,CAAgBC,IAAD,iBACf;AACC,IAAA,GAAG,EAAEA,IAAI,CAACC,GADX;AAEC,IAAA,OAAO,EAAE,MAAM;AACdL,MAAAA,WAAW,CAACI,IAAI,CAACC,GAAN,CAAX;AACA,KAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAMED,IAAI,CAACE,IANP,CADA,CAFF,CADD;AAeA;;AAED,eAAejB,YAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport {\n\tUPDATE_CATEGORIES,\n\tUPDATE_CURRENT_CATEGORY,\n} from \"../../utils/actions\";\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction CategoryMenu() {\n\tconst [state, dispatch] = useStoreContext();\n\n\tconst { categories } = state;\n\n\tconst { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n  \n\n\tconst handleClick = (id) => {\n\t\tdispatch({\n\t\t\ttype: UPDATE_CURRENT_CATEGORY,\n\t\t\tcurrentCategory: id,\n\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>Choose a Category:</h2>\n\t\t\t{categories.map((item) => (\n\t\t\t\t<button\n\t\t\t\t\tkey={item._id}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\thandleClick(item._id);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{item.name}\n\t\t\t\t</button>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default CategoryMenu;\n"]},"metadata":{},"sourceType":"module"}