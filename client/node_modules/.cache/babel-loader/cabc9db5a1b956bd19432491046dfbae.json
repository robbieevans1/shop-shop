{"ast":null,"code":"import _slicedToArray from\"/Users/evansrm5/Desktop/Bootcamp/shop-shop/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useEffect}from\"react\";import{useQuery}from\"@apollo/client\";import{useStoreContext}from\"../../utils/GlobalState\";import{UPDATE_CATEGORIES,UPDATE_CURRENT_CATEGORY}from\"../../utils/actions\";import{QUERY_CATEGORIES}from\"../../utils/queries\";import{idbPromise}from\"../../utils/helpers\";function CategoryMenu(){var _useStoreContext=useStoreContext(),_useStoreContext2=_slicedToArray(_useStoreContext,2),state=_useStoreContext2[0],dispatch=_useStoreContext2[1];var categories=state.categories;var _useQuery=useQuery(QUERY_CATEGORIES),loading=_useQuery.loading,categoryData=_useQuery.data;useEffect(function(){if(categoryData){dispatch({type:UPDATE_CATEGORIES,categories:categoryData.categories});categoryData.categories.forEach(function(category){idbPromise('categories','put',category);});}else if(!loading){idbPromise('categories','get').then(function(categories){dispatch({type:UPDATE_CATEGORIES,categories:categories});});}},[categoryData,loading,dispatch]);var handleClick=function handleClick(id){dispatch({type:UPDATE_CURRENT_CATEGORY,currentCategory:id});};return/*#__PURE__*/React.createElement(\"div\",null,/*#__PURE__*/React.createElement(\"h2\",null,\"Choose a Category:\"),categories.map(function(item){return/*#__PURE__*/React.createElement(\"button\",{key:item._id,onClick:function onClick(){handleClick(item._id);}},item.name);}));}export default CategoryMenu;","map":{"version":3,"sources":["/Users/evansrm5/Desktop/Bootcamp/shop-shop/client/src/components/CategoryMenu/index.js"],"names":["React","useEffect","useQuery","useStoreContext","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","QUERY_CATEGORIES","idbPromise","CategoryMenu","state","dispatch","categories","loading","categoryData","data","type","forEach","category","then","handleClick","id","currentCategory","map","item","_id","name"],"mappings":"wKAAA,MAAOA,CAAAA,KAAP,EAAgBC,SAAhB,KAAiC,OAAjC,CACA,OAASC,QAAT,KAAyB,gBAAzB,CACA,OAASC,eAAT,KAAgC,yBAAhC,CACA,OACCC,iBADD,CAECC,uBAFD,KAGO,qBAHP,CAIA,OAASC,gBAAT,KAAiC,qBAAjC,CACA,OAASC,UAAT,KAA2B,qBAA3B,CAEA,QAASC,CAAAA,YAAT,EAAwB,CACvB,qBAA0BL,eAAe,EAAzC,sDAAOM,KAAP,sBAAcC,QAAd,sBAEA,GAAQC,CAAAA,UAAR,CAAuBF,KAAvB,CAAQE,UAAR,CAEA,cAAwCT,QAAQ,CAACI,gBAAD,CAAhD,CAAQM,OAAR,WAAQA,OAAR,CAAuBC,YAAvB,WAAiBC,IAAjB,CAECb,SAAS,CAAC,UAAM,CACd,GAAIY,YAAJ,CAAkB,CAChBH,QAAQ,CAAC,CACPK,IAAI,CAAEX,iBADC,CAEPO,UAAU,CAAEE,YAAY,CAACF,UAFlB,CAAD,CAAR,CAIAE,YAAY,CAACF,UAAb,CAAwBK,OAAxB,CAAgC,SAAAC,QAAQ,CAAI,CAC1CV,UAAU,CAAC,YAAD,CAAe,KAAf,CAAsBU,QAAtB,CAAV,CACD,CAFD,EAGD,CARD,IAQO,IAAI,CAACL,OAAL,CAAc,CACnBL,UAAU,CAAC,YAAD,CAAe,KAAf,CAAV,CAAgCW,IAAhC,CAAqC,SAAAP,UAAU,CAAI,CACjDD,QAAQ,CAAC,CACPK,IAAI,CAAEX,iBADC,CAEPO,UAAU,CAAEA,UAFL,CAAD,CAAR,CAID,CALD,EAMD,CACF,CAjBQ,CAiBN,CAACE,YAAD,CAAeD,OAAf,CAAwBF,QAAxB,CAjBM,CAAT,CAoBD,GAAMS,CAAAA,WAAW,CAAG,QAAdA,CAAAA,WAAc,CAACC,EAAD,CAAQ,CAC3BV,QAAQ,CAAC,CACRK,IAAI,CAAEV,uBADE,CAERgB,eAAe,CAAED,EAFT,CAAD,CAAR,CAIA,CALD,CAOA,mBACC,4CACC,mDADD,CAEET,UAAU,CAACW,GAAX,CAAe,SAACC,IAAD,qBACf,8BACC,GAAG,CAAEA,IAAI,CAACC,GADX,CAEC,OAAO,CAAE,kBAAM,CACdL,WAAW,CAACI,IAAI,CAACC,GAAN,CAAX,CACA,CAJF,EAMED,IAAI,CAACE,IANP,CADe,EAAf,CAFF,CADD,CAeA,CAED,cAAejB,CAAAA,YAAf","sourcesContent":["import React, { useEffect } from \"react\";\nimport { useQuery } from \"@apollo/client\";\nimport { useStoreContext } from \"../../utils/GlobalState\";\nimport {\n\tUPDATE_CATEGORIES,\n\tUPDATE_CURRENT_CATEGORY,\n} from \"../../utils/actions\";\nimport { QUERY_CATEGORIES } from \"../../utils/queries\";\nimport { idbPromise } from \"../../utils/helpers\";\n\nfunction CategoryMenu() {\n\tconst [state, dispatch] = useStoreContext();\n\n\tconst { categories } = state;\n\n\tconst { loading, data: categoryData } = useQuery(QUERY_CATEGORIES);\n\n  useEffect(() => {\n    if (categoryData) {\n      dispatch({\n        type: UPDATE_CATEGORIES,\n        categories: categoryData.categories\n      });\n      categoryData.categories.forEach(category => {\n        idbPromise('categories', 'put', category);\n      });\n    } else if (!loading) {\n      idbPromise('categories', 'get').then(categories => {\n        dispatch({\n          type: UPDATE_CATEGORIES,\n          categories: categories\n        });\n      });\n    }\n  }, [categoryData, loading, dispatch]);\n  \n\n\tconst handleClick = (id) => {\n\t\tdispatch({\n\t\t\ttype: UPDATE_CURRENT_CATEGORY,\n\t\t\tcurrentCategory: id,\n\t\t});\n\t};\n\n\treturn (\n\t\t<div>\n\t\t\t<h2>Choose a Category:</h2>\n\t\t\t{categories.map((item) => (\n\t\t\t\t<button\n\t\t\t\t\tkey={item._id}\n\t\t\t\t\tonClick={() => {\n\t\t\t\t\t\thandleClick(item._id);\n\t\t\t\t\t}}\n\t\t\t\t>\n\t\t\t\t\t{item.name}\n\t\t\t\t</button>\n\t\t\t))}\n\t\t</div>\n\t);\n}\n\nexport default CategoryMenu;\n"]},"metadata":{},"sourceType":"module"}