{"ast":null,"code":"export function pluralize(name, count) {\n  if (count === 1) {\n    return name;\n  }\n\n  return name + \"s\";\n}\nexport function idbPromise(storeName, method, object) {\n  return new Promise((resolve, reject) => {\n    // open connection to the database `shop-shop` with the version of 1\n    const request = window.indexedDB.open(\"shop-shop\", 1); // create variables to hold reference to the database, transaction (tx), and object store\n\n    let db, tx, store; // if version has changed (or if this is the first time using the database), run this method and create the three object stores\n\n    request.onupgradeneeded = function (e) {\n      const db = request.result; // create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n\n      db.createObjectStore(\"products\", {\n        keyPath: \"_id\"\n      });\n      db.createObjectStore(\"categories\", {\n        keyPath: \"_id\"\n      });\n      db.createObjectStore(\"cart\", {\n        keyPath: \"_id\"\n      });\n    }; // handle any errors with connecting\n\n\n    request.onerror = function (e) {\n      console.log(\"There was an error\");\n    }; // on database open success\n\n\n    request.onsuccess = function (e) {\n      // save a reference of the database to the `db` variable\n      db = request.result; // open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n\n      tx = db.transaction(storeName, \"readwrite\"); // save a reference to that object store\n\n      store = tx.objectStore(storeName); // if there's any errors, let us know\n\n      db.onerror = function (e) {\n        console.log(\"error\", e);\n      };\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n\n        case 'get':\n          const all = store.getAll();\n\n          all.onsuccess = function () {\n            resolve(all.result);\n          };\n\n          break;\n\n        case 'delete':\n          store.delete(object._id);\n          break;\n\n        default:\n          console.log('No valid method');\n          break;\n      } // when the transaction is complete, close the connection\n\n\n      tx.oncomplete = function () {\n        db.close();\n      };\n    };\n  });\n}","map":{"version":3,"sources":["/Users/evansrm5/Desktop/Bootcamp/shop-shop/client/src/utils/helpers.js"],"names":["pluralize","name","count","idbPromise","storeName","method","object","Promise","resolve","reject","request","window","indexedDB","open","db","tx","store","onupgradeneeded","e","result","createObjectStore","keyPath","onerror","console","log","onsuccess","transaction","objectStore","put","all","getAll","delete","_id","oncomplete","close"],"mappings":"AAAA,OAAO,SAASA,SAAT,CAAmBC,IAAnB,EAAyBC,KAAzB,EAAgC;AACtC,MAAIA,KAAK,KAAK,CAAd,EAAiB;AAChB,WAAOD,IAAP;AACA;;AACD,SAAOA,IAAI,GAAG,GAAd;AACA;AAED,OAAO,SAASE,UAAT,CAAoBC,SAApB,EAA+BC,MAA/B,EAAuCC,MAAvC,EAA+C;AACrD,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACvC;AACA,UAAMC,OAAO,GAAGC,MAAM,CAACC,SAAP,CAAiBC,IAAjB,CAAsB,WAAtB,EAAmC,CAAnC,CAAhB,CAFuC,CAIvC;;AACA,QAAIC,EAAJ,EAAQC,EAAR,EAAYC,KAAZ,CALuC,CAOvC;;AACAN,IAAAA,OAAO,CAACO,eAAR,GAA0B,UAAUC,CAAV,EAAa;AACtC,YAAMJ,EAAE,GAAGJ,OAAO,CAACS,MAAnB,CADsC,CAEtC;;AACAL,MAAAA,EAAE,CAACM,iBAAH,CAAqB,UAArB,EAAiC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAjC;AACAP,MAAAA,EAAE,CAACM,iBAAH,CAAqB,YAArB,EAAmC;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAnC;AACAP,MAAAA,EAAE,CAACM,iBAAH,CAAqB,MAArB,EAA6B;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAA7B;AACA,KAND,CARuC,CAgBvC;;;AACAX,IAAAA,OAAO,CAACY,OAAR,GAAkB,UAAUJ,CAAV,EAAa;AAC9BK,MAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;AACA,KAFD,CAjBuC,CAoBvC;;;AACAd,IAAAA,OAAO,CAACe,SAAR,GAAoB,UAAUP,CAAV,EAAa;AAChC;AACAJ,MAAAA,EAAE,GAAGJ,OAAO,CAACS,MAAb,CAFgC,CAGhC;;AACAJ,MAAAA,EAAE,GAAGD,EAAE,CAACY,WAAH,CAAetB,SAAf,EAA0B,WAA1B,CAAL,CAJgC,CAKhC;;AACAY,MAAAA,KAAK,GAAGD,EAAE,CAACY,WAAH,CAAevB,SAAf,CAAR,CANgC,CAQhC;;AACAU,MAAAA,EAAE,CAACQ,OAAH,GAAa,UAAUJ,CAAV,EAAa;AACzBK,QAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBN,CAArB;AACA,OAFD;;AAIG,cAAQb,MAAR;AACE,aAAK,KAAL;AACEW,UAAAA,KAAK,CAACY,GAAN,CAAUtB,MAAV;AACAE,UAAAA,OAAO,CAACF,MAAD,CAAP;AACA;;AACF,aAAK,KAAL;AACE,gBAAMuB,GAAG,GAAGb,KAAK,CAACc,MAAN,EAAZ;;AACAD,UAAAA,GAAG,CAACJ,SAAJ,GAAgB,YAAW;AACzBjB,YAAAA,OAAO,CAACqB,GAAG,CAACV,MAAL,CAAP;AACD,WAFD;;AAGA;;AACF,aAAK,QAAL;AACEH,UAAAA,KAAK,CAACe,MAAN,CAAazB,MAAM,CAAC0B,GAApB;AACA;;AACF;AACET,UAAAA,OAAO,CAACC,GAAR,CAAY,iBAAZ;AACA;AAhBJ,OAb6B,CAgChC;;;AACAT,MAAAA,EAAE,CAACkB,UAAH,GAAgB,YAAY;AAC3BnB,QAAAA,EAAE,CAACoB,KAAH;AACA,OAFD;AAGA,KApCD;AAqCA,GA1DM,CAAP;AA2DA","sourcesContent":["export function pluralize(name, count) {\n\tif (count === 1) {\n\t\treturn name;\n\t}\n\treturn name + \"s\";\n}\n\nexport function idbPromise(storeName, method, object) {\n\treturn new Promise((resolve, reject) => {\n\t\t// open connection to the database `shop-shop` with the version of 1\n\t\tconst request = window.indexedDB.open(\"shop-shop\", 1);\n\n\t\t// create variables to hold reference to the database, transaction (tx), and object store\n\t\tlet db, tx, store;\n\n\t\t// if version has changed (or if this is the first time using the database), run this method and create the three object stores\n\t\trequest.onupgradeneeded = function (e) {\n\t\t\tconst db = request.result;\n\t\t\t// create object store for each type of data and set \"primary\" key index to be the `_id` of the data\n\t\t\tdb.createObjectStore(\"products\", { keyPath: \"_id\" });\n\t\t\tdb.createObjectStore(\"categories\", { keyPath: \"_id\" });\n\t\t\tdb.createObjectStore(\"cart\", { keyPath: \"_id\" });\n\t\t};\n\n\t\t// handle any errors with connecting\n\t\trequest.onerror = function (e) {\n\t\t\tconsole.log(\"There was an error\");\n\t\t};\n\t\t// on database open success\n\t\trequest.onsuccess = function (e) {\n\t\t\t// save a reference of the database to the `db` variable\n\t\t\tdb = request.result;\n\t\t\t// open a transaction do whatever we pass into `storeName` (must match one of the object store names)\n\t\t\ttx = db.transaction(storeName, \"readwrite\");\n\t\t\t// save a reference to that object store\n\t\t\tstore = tx.objectStore(storeName);\n\n\t\t\t// if there's any errors, let us know\n\t\t\tdb.onerror = function (e) {\n\t\t\t\tconsole.log(\"error\", e);\n\t\t\t};\n\n      switch (method) {\n        case 'put':\n          store.put(object);\n          resolve(object);\n          break;\n        case 'get':\n          const all = store.getAll();\n          all.onsuccess = function() {\n            resolve(all.result);\n          };\n          break;\n        case 'delete':\n          store.delete(object._id);\n          break;\n        default:\n          console.log('No valid method');\n          break;\n      }      \n\n\t\t\t// when the transaction is complete, close the connection\n\t\t\ttx.oncomplete = function () {\n\t\t\t\tdb.close();\n\t\t\t};\n\t\t};\n\t});\n}\n"]},"metadata":{},"sourceType":"module"}