{"ast":null,"code":"import { useReducer } from \"react\";\nimport { UPDATE_PRODUCTS, UPDATE_CATEGORIES, UPDATE_CURRENT_CATEGORY, ADD_TO_CART, ADD_MULTIPLE_TO_CART, REMOVE_FROM_CART, UPDATE_CART_QUANTITY, CLEAR_CART, TOGGLE_CART } from \"./actions\";\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n    case UPDATE_PRODUCTS:\n      return { ...state,\n        products: [...action.products]\n      };\n    // if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n\n    case UPDATE_CATEGORIES:\n      return { ...state,\n        categories: [...action.categories]\n      };\n\n    case UPDATE_CURRENT_CATEGORY:\n      return { ...state,\n        currentCategory: action.currentCategory\n      };\n\n    case ADD_TO_CART:\n      return { ...state,\n        cartOpen: true,\n        cart: [...state.cart, action.product]\n      };\n\n    case ADD_MULTIPLE_TO_CART:\n      return { ...state,\n        cart: [...state.cart, ...action.products]\n      };\n\n    case REMOVE_FROM_CART:\n      let newState = state.cart.filter(product => {\n        return product._id !== action._id;\n      });\n      return { ...state,\n        cartOpen: newState.length > 0,\n        cart: newState\n      };\n\n    case UPDATE_CART_QUANTITY:\n      return { ...state,\n        cartOpen: true,\n        cart: state.cart.map(product => {\n          if (action._id === product._id) {\n            product.purchaseQuantity = action.purchaseQuantity;\n          }\n\n          return product;\n        })\n      };\n\n    case CLEAR_CART:\n      return { ...state,\n        cartOpen: false,\n        cart: []\n      };\n\n    case TOGGLE_CART:\n      return { ...state,\n        cartOpen: !state.cartOpen\n      };\n\n    default:\n      return state;\n  }\n};\nexport function useProductReducer(initialState) {\n  return useReducer(reducer, initialState);\n}","map":{"version":3,"sources":["/Users/evansrm5/Desktop/Bootcamp/shop-shop/client/src/utils/reducers.js"],"names":["useReducer","UPDATE_PRODUCTS","UPDATE_CATEGORIES","UPDATE_CURRENT_CATEGORY","ADD_TO_CART","ADD_MULTIPLE_TO_CART","REMOVE_FROM_CART","UPDATE_CART_QUANTITY","CLEAR_CART","TOGGLE_CART","reducer","state","action","type","products","categories","currentCategory","cartOpen","cart","product","newState","filter","_id","length","map","purchaseQuantity","useProductReducer","initialState"],"mappings":"AAAA,SAASA,UAAT,QAA2B,OAA3B;AAEA,SACCC,eADD,EAECC,iBAFD,EAGCC,uBAHD,EAICC,WAJD,EAKCC,oBALD,EAMCC,gBAND,EAOCC,oBAPD,EAQCC,UARD,EASCC,WATD,QAUO,WAVP;AAYA,OAAO,MAAMC,OAAO,GAAG,CAACC,KAAD,EAAQC,MAAR,KAAmB;AACzC,UAAQA,MAAM,CAACC,IAAf;AACC;AACA,SAAKZ,eAAL;AACC,aAAO,EACN,GAAGU,KADG;AAENG,QAAAA,QAAQ,EAAE,CAAC,GAAGF,MAAM,CAACE,QAAX;AAFJ,OAAP;AAID;;AACA,SAAKZ,iBAAL;AACC,aAAO,EACN,GAAGS,KADG;AAENI,QAAAA,UAAU,EAAE,CAAC,GAAGH,MAAM,CAACG,UAAX;AAFN,OAAP;;AAKD,SAAKZ,uBAAL;AACC,aAAO,EACN,GAAGQ,KADG;AAENK,QAAAA,eAAe,EAAEJ,MAAM,CAACI;AAFlB,OAAP;;AAID,SAAKZ,WAAL;AACC,aAAO,EACN,GAAGO,KADG;AAENM,QAAAA,QAAQ,EAAE,IAFJ;AAGNC,QAAAA,IAAI,EAAE,CAAC,GAAGP,KAAK,CAACO,IAAV,EAAgBN,MAAM,CAACO,OAAvB;AAHA,OAAP;;AAKD,SAAKd,oBAAL;AACC,aAAO,EACN,GAAGM,KADG;AAENO,QAAAA,IAAI,EAAE,CAAC,GAAGP,KAAK,CAACO,IAAV,EAAgB,GAAGN,MAAM,CAACE,QAA1B;AAFA,OAAP;;AAID,SAAKR,gBAAL;AACC,UAAIc,QAAQ,GAAGT,KAAK,CAACO,IAAN,CAAWG,MAAX,CAAmBF,OAAD,IAAa;AAC7C,eAAOA,OAAO,CAACG,GAAR,KAAgBV,MAAM,CAACU,GAA9B;AACA,OAFc,CAAf;AAIA,aAAO,EACN,GAAGX,KADG;AAENM,QAAAA,QAAQ,EAAEG,QAAQ,CAACG,MAAT,GAAkB,CAFtB;AAGNL,QAAAA,IAAI,EAAEE;AAHA,OAAP;;AAKD,SAAKb,oBAAL;AACC,aAAO,EACN,GAAGI,KADG;AAENM,QAAAA,QAAQ,EAAE,IAFJ;AAGNC,QAAAA,IAAI,EAAEP,KAAK,CAACO,IAAN,CAAWM,GAAX,CAAgBL,OAAD,IAAa;AACjC,cAAIP,MAAM,CAACU,GAAP,KAAeH,OAAO,CAACG,GAA3B,EAAgC;AAC/BH,YAAAA,OAAO,CAACM,gBAAR,GAA2Bb,MAAM,CAACa,gBAAlC;AACA;;AACD,iBAAON,OAAP;AACA,SALK;AAHA,OAAP;;AAWD,SAAKX,UAAL;AACC,aAAO,EACN,GAAGG,KADG;AAENM,QAAAA,QAAQ,EAAE,KAFJ;AAGNC,QAAAA,IAAI,EAAE;AAHA,OAAP;;AAMD,SAAKT,WAAL;AACC,aAAO,EACN,GAAGE,KADG;AAENM,QAAAA,QAAQ,EAAE,CAACN,KAAK,CAACM;AAFX,OAAP;;AAKD;AACC,aAAON,KAAP;AAlEF;AAoEA,CArEM;AAuEP,OAAO,SAASe,iBAAT,CAA2BC,YAA3B,EAAyC;AAC/C,SAAO3B,UAAU,CAACU,OAAD,EAAUiB,YAAV,CAAjB;AACA","sourcesContent":["import { useReducer } from \"react\";\n\nimport {\n\tUPDATE_PRODUCTS,\n\tUPDATE_CATEGORIES,\n\tUPDATE_CURRENT_CATEGORY,\n\tADD_TO_CART,\n\tADD_MULTIPLE_TO_CART,\n\tREMOVE_FROM_CART,\n\tUPDATE_CART_QUANTITY,\n\tCLEAR_CART,\n\tTOGGLE_CART,\n} from \"./actions\";\n\nexport const reducer = (state, action) => {\n\tswitch (action.type) {\n\t\t// if action type value is the value of `UPDATE_PRODUCTS`, return a new state object with an updated products array\n\t\tcase UPDATE_PRODUCTS:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tproducts: [...action.products],\n\t\t\t};\n\t\t// if action type value is the value of `UPDATE_CATEGORIES`, return a new state object with an updated categories array\n\t\tcase UPDATE_CATEGORIES:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcategories: [...action.categories],\n\t\t\t};\n\n\t\tcase UPDATE_CURRENT_CATEGORY:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcurrentCategory: action.currentCategory,\n\t\t\t};\n\t\tcase ADD_TO_CART:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcartOpen: true,\n\t\t\t\tcart: [...state.cart, action.product],\n\t\t\t};\n\t\tcase ADD_MULTIPLE_TO_CART:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcart: [...state.cart, ...action.products],\n\t\t\t};\n\t\tcase REMOVE_FROM_CART:\n\t\t\tlet newState = state.cart.filter((product) => {\n\t\t\t\treturn product._id !== action._id;\n\t\t\t});\n\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcartOpen: newState.length > 0,\n\t\t\t\tcart: newState,\n\t\t\t};\n\t\tcase UPDATE_CART_QUANTITY:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcartOpen: true,\n\t\t\t\tcart: state.cart.map((product) => {\n\t\t\t\t\tif (action._id === product._id) {\n\t\t\t\t\t\tproduct.purchaseQuantity = action.purchaseQuantity;\n\t\t\t\t\t}\n\t\t\t\t\treturn product;\n\t\t\t\t}),\n\t\t\t};\n\n\t\tcase CLEAR_CART:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcartOpen: false,\n\t\t\t\tcart: [],\n\t\t\t};\n\n\t\tcase TOGGLE_CART:\n\t\t\treturn {\n\t\t\t\t...state,\n\t\t\t\tcartOpen: !state.cartOpen,\n\t\t\t};\n\n\t\tdefault:\n\t\t\treturn state;\n\t}\n};\n\nexport function useProductReducer(initialState) {\n\treturn useReducer(reducer, initialState);\n}\n"]},"metadata":{},"sourceType":"module"}